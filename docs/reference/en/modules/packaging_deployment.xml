<chapter id="packaging_deployment">
    <title>Packaging and Deploying</title>

    <sect1 id="deploy-intro">
        <title>Overview</title>

		<para>
			Please consider Esper Enterprise Edition as a target deployment platform. Esper alone does not ship with a server as it is designed as a core CEP engine.
		</para>

        <para>
			To support packaging and deploying event-driven applications, Esper offers infrastructure as outlined herein:
        </para>
        
		<itemizedlist>
			<listitem>
				<para>
                    EPL modules to build a cohesive, easily-externalizable deployment unit out of related statements as described in <xref linkend="deploy-eplmodule"/>.
                </para>
			</listitem>
			<listitem>
				<para>
                    The deployment administrative interface is described in <xref linkend="deploy-admin"/>.
                </para>
			</listitem>
		</itemizedlist>

    </sect1>
    
    <sect1 id="deploy-eplmodule">
        <title>EPL Modules</title>

		<indexterm><primary>packaging</primary><secondary>EPL module</secondary></indexterm>
		<indexterm><primary>deployment</primary><secondary>EPL module</secondary></indexterm>
		
		<para>
			An EPL module file is a plain text file in which EPL statements appear separated by the semicolon (;) character. It bundles EPL statements with optional deployment instructions. A service provider instance keeps track of the known and/or deployed EPL modules and makes it easy to add, remove, deploy and undeploy EPL modules.
		</para>

		<para>
			The synopsis of an EPL module file is:
		</para>
		
		<synopsis>[module <emphasis>module_name</emphasis>;]
[uses <emphasis>module_name</emphasis>; | import <emphasis>import_name</emphasis>;] [uses <emphasis>module_name</emphasis>; | import <emphasis>import_name</emphasis>;] [...]
[<emphasis>epl_statement</emphasis>;] [<emphasis>epl_statement</emphasis>;] [...]</synopsis>

		<para>
			Use the <literal>module</literal> keyword followed a <emphasis>module_name</emphasis> identifier or a package (identifiers separated by dots) to declare the name of the module. The module name declaration must be at the beginning of the file, comments and whitespace excluded. The module name 
			serves to check uses-dependences of other modules.  
		 </para>
		 
		 <para>
			If a module file requires certain constructs that may be shared by other module files, such as named windows, variables, event types, variant streams or inserted-into streams required by statements,
			a module file may specify zero to many dependent modules with the <literal>uses</literal> keyword. At deployment time the engine checks the uses-dependencies
			and ensures that a module of that name is already deployed or will be deployed as part of the deployments. The deployment API supports ordering modules according to their uses-relationship.
		 </para>
		 
		 <para>
			 If the EPL statements in the module require types such as for underlying events or user-defined functions, use the <literal>import</literal> keyword followed by the fully-qualified class name or package name in the format <literal>package.*</literal>.
			 The <literal>uses</literal> and <literal>import</literal> keywords are optional and must occur after the <literal>module</literal> declaration.
		 </para>
		 
		 <para>
			 Following the optional deployment instructions are any number of <emphasis>epl_statement</emphasis> EPL statements that are separated by semicolon (<literal>;</literal>).
		 </para>
		 
		 <para>
			 The following is a sample EPL module file explained in detail thereafter:
		 </para>

		<programlisting><![CDATA[// Declare the name for the module
module org.myorganization.switchmonitor;

// Declare other module(s) that this module depends on
uses org.myorganization.common;

// Import any Java/.NET classes in an application package 
import org.myorganization.events.*;

// Declare an event type based on a type in the namespace that was imported as above
create schema MySwitchEvent as MySwitchEventObject;

// Sample statement
@Name('Off-On-Detector')
insert into MyOffOnStream
select * from pattern[every-distinct(Id) a=MySwitchEvent(status='off') 
  -> b=MySwitchEvent(Id=a.Id, Status='on')];

// Sample statement
@Name('Count-Switched-On')
@Description('Count per switch id of the number of Off-to-On switches in the last 1 hour')
select Id, count(*) from MyOffOnStream.win:time(1 hour) group by Id;]]></programlisting>

        <para>
			The example above declares a module name of <literal>org.myorganization.switchmonitor</literal>. As defined by the <literal>uses</literal> keyword, it ensures that the <literal>org.myorganization.common</literal> module is already deployed.
			The example demonstrates the <literal>import</literal> keyword to make a package name known to the engine for resolving native type names, as the example assumes that <literal>MySwitchEventObject</literal> is a native event class.
			In addition the example module contains two statements separated by semicolon characters.
        </para>

        <para>
			Your application code may, after deployment, look up a statement and attach listeners as shown here:
        </para>
			<programlisting><![CDATA[epService.getEPAdministrator().getStatement("Count-Switched-On").addListener(...);]]></programlisting>
    </sect1>

    <sect1 id="deploy-admin">
        <title>The Deployment Administrative Interface</title>

		<indexterm><primary>packaging</primary><secondary>EPDeploymentAdmin interface</secondary></indexterm>
		<indexterm><primary>deployment</primary><secondary>EPDeploymentAdmin interface</secondary></indexterm>
		
		<para>
			The <literal>com.espertech.esper.client.deploy.EPDeploymentAdmin</literal> service available from the <literal>EPAdministrator</literal> interface by method <literal>getDeploymentAdmin</literal> provides the functionality available to manage packaging and deployment.
			Please consult the SDK documentation for more information.
		</para>

		<para>
		  The deployment API allows to read resources and parse text strings to obtain an object representation of the EPL module, the <literal>Module</literal>. A <literal>Module</literal> object can also be simply constructed.
		</para>
		
		<para>
		  After your application obtains a <literal>Module</literal> instance it may either use <literal>deploy</literal> to deploy the module directly, starting all statements of the module. Alternatively your application
		  may add a module, making it known without starting statements for later deployment. In each case the module is assigned a deployment id, which acts as a unique primary key for all known modules. 
		</para>

		<para>
		  A module may be in two states: undeployed or deployed. When calling <literal>Add</literal> to add a module, it starts life in the undeployed state. When calling <literal>Deploy</literal> to deploy a module, it starts life in the deployed state. 
		  A module may be transitioned by providing the deployment id and by calling the <literal>Deploy</literal> or <literal>Undeploy</literal> methods.
		</para>

		<para>
		  Your code can remove a module in undeployed state using the <literal>Remove</literal> method or the <literal>UndeployRemove</literal> method. If the module is in deployed state, use <literal>UndeployRemove</literal> to undeploy and remove the module.
		</para>

		<para>The <literal>DeploymentOptions</literal> instance that can be passed to the <literal>Deploy</literal> method when validating or deploying modules controls validation, fail-fast, rollback and the isolated service provider, if any, for the deployment.</para>

		<para>
		  We also provide additional sample code to read and deploy modules as part of the J2EE considerations below.
		</para>

		<sect2 id="deploy-admin-readparse">
        <title>Reading Module Content</title>
			<para>
				Read and parse module files via the <literal>EPDeploymentAdmin</literal> interface <literal>ReadXXX</literal> and <literal>Parse</literal> methods, which returns a <literal>Module</literal> instance to represent the module information. 
			</para>
	
			<para>
				This code snippet demonstrates reading and parsing a module given a file name:
			</para>
			<programlisting><![CDATA[EPServiceProvider epService = EPServiceProviderManager.GetDefaultProvider();
EPDeploymentAdmin deployAdmin = epService.EPAdministrator.DeploymentAdmin;
Module module = deployAdmin.ReadFile("switchmonitor.epl");]]></programlisting>

			<para>
				The service provides additional read and parse methods to read from a URL, classpath, input stream or string.
			</para>
	  </sect2>

		<sect2 id="deploy-admin-order">
        <title>Ordering Multiple Modules</title>
			<para>
				Since modules may have inter-dependencies as discussed under the <literal>uses</literal> declaration,  the deployment interface provides the <literal>DeploymentOrder</literal> properties to order a collection of modules before deployment.
			</para>
			
			<para>
				Assuming your application reads multiple modules into a <literal>mymodules</literal> module list, this code snippet orders the modules for deployment and validates dependency declarations for each module:
			</para>
			<programlisting><![CDATA[IList<Module> mymodules =  ... read modules...;  
DeploymentOrder order = deployAdmin.GetDeploymentOrder(mymodules, new DeploymentOrderOptions());]]></programlisting>
	  </sect2>

		<sect2 id="deploy-admin-deploy-undeploy">
        <title>Deploying and Undeploying</title>
			<para>
				The deployment interface returns a deployment id for each module made known by adding a module or by deploying a module. To undeploy the module your application must provide the deployment id.
			</para>
			
			<para>
				The <literal>Undeploy</literal> operation removes all named windows, variables, event types or any other information associated to the statements within the module to be undeployed.
			</para>
			
			<para>
				The next code snippet deploys modules, starting each modulle's EPL statements:
			</para>
			<programlisting><![CDATA[foreach (Module mymodule in order.Ordered) {
  DeploymentResult deployResult = deployAdmin.Deploy(mymodule, new DeploymentOptions());
}]]></programlisting>
			
			<para>
				Undeploying a module destroys all started statements associated to the module.
			</para>

			<para>
				To undeploy and at the same time remove the module from the list of known modules use the <literal>UndeployRemove</literal> method and pass the deployment id:
			</para>
			<programlisting><![CDATA[deployAdmin.UndeployRemove(deployResult.DeploymentId);]]></programlisting>
	  </sect2>
	  
	   <sect2 id="deploy-admin-list">
        <title>Listing Deployments</title>
			<para>
				The deployment interface returns all module information that allows your application to determine which modules are known and their current state. 
			</para>
			
			<para>
				To obtain a list of all known modules or information for a specific module, the calls are:
			</para>
			<programlisting><![CDATA[DeploymentInformation[] info = deployAdmin.DeploymentInformation;
			
// Given a deployment id, return the deployment information
DeploymentInformation infoModule = deployAdmin.GetDeployment(deploymentId);]]></programlisting>			
	  </sect2>

	   <sect2 id="deploy-admin-transition">
        <title>State Transitioning a Module</title>
			
			<para>
				The following sample code adds a module, transitions the module to deployed, then undeploys and removes the module entirely;
			</para>
			<programlisting><![CDATA[// This sample uses the parse method to obtain a module
Module module = deployAdmin.Parse("create schema MySchema (col1 int)";

// Make the module know; It now shows up in undeployed state
String moduleDeploymentId = deployAdmin.Add(module);

// Start all statements, passing a null options object for default options
deployAdmin.Deploy(moduleDeploymentId, null);

// Undeploy module, destroying all statements
deployAdmin.Undeploy(moduleDeploymentId);

// Remove module; It will no longer be known
deployAdmin.Remove(moduleDeploymentId);]]></programlisting>				  
		</sect2>

	   <sect2 id="deploy-admin-bestpractices">
        <title>Best Practices</title>			
			<para>
				Use the <literal>@Name</literal> annotation to assign a name to each statement that your application would like to attach a listener or subscriber, or look up the statement for iteration or management by the administrative API.
			</para>
			<para>
				Use the <literal>create schema</literal> syntax and the <literal>import</literal> keyword to define event types. When sharing event types, named windows or variables between modules use the <literal>uses</literal> keyword to 
				declare a separate module that holds the shared definitions.
			</para>
			<para>
				To validate whether a set of statements is complete and can start without issues, set the following flags on a <literal>DeploymentOptions</literal> instance passed to the <literal>Deploy</literal> method as the code snippet below shows:
			</para>			
			<programlisting><![CDATA[DeploymentOptions options = new DeploymentOptions();
options.IsolatedServiceProvider = "validation";	// we isolate any statements 
options.IsValidateOnly = true;	// validate leaving no started statements
options.IsFailFast = false; // do not fail on first error
epService.EPAdministrator.DeploymentAdmin
  .eploy(module, options);]]></programlisting>
		</sect2>

	</sect1>
</chapter>
