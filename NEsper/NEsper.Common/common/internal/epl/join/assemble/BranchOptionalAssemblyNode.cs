///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2006-2019 Esper Team. All rights reserved.                           /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
using com.espertech.esper.common.client;
using com.espertech.esper.common.@internal.epl.@join.rep;
using com.espertech.esper.common.@internal.util;

namespace com.espertech.esper.common.@internal.epl.join.assemble
{
    /// <summary>
    ///     Assembly node for an event stream that is a branch with a single optional child node below it.
    /// </summary>
    public class BranchOptionalAssemblyNode : BaseAssemblyNode
    {
        // For tracking when we have multiple events for this stream
        private ISet<EventBean> completedEvents;
        private bool haveChildResults;
        private IList<Node> resultsForStream;
        private EventBean singleResultEvent;

        // For tracking when we only have a single event for this stream as a result
        private Node singleResultNode;

        /// <summary>
        ///     Ctor.
        /// </summary>
        /// <param name="streamNum">is the stream number</param>
        /// <param name="numStreams">is the number of streams</param>
        public BranchOptionalAssemblyNode(
            int streamNum,
            int numStreams)
            : base(streamNum, numStreams)
        {
        }

        public override void Init(IList<Node>[] result)
        {
            resultsForStream = result[streamNum];
            singleResultNode = null;
            singleResultEvent = null;
            haveChildResults = false;

            if (resultsForStream != null) {
                var numNodes = resultsForStream.Count;
                if (numNodes == 1) {
                    var node = resultsForStream[0];
                    ISet<EventBean> nodeEvents = node.Events;

                    // If there is a single result event (typical case)
                    if (nodeEvents.Count == 1) {
                        singleResultNode = node;
                        singleResultEvent = nodeEvents.First();
                    }
                }

                if (singleResultNode == null) {
                    completedEvents = new HashSet<EventBean>();
                }
            }
        }

        public override void Process(
            IList<Node>[] result,
            ICollection<EventBean[]> resultFinalRows,
            EventBean resultRootEvent)
        {
            // there cannot be child nodes to compute a cartesian product if this node had no results
            if (resultsForStream == null) {
                return;
            }

            // If this node's result set consisted of a single event
            if (singleResultNode != null) {
                // If there are no child results, post a row
                if (!haveChildResults) {
                    var row = new EventBean[numStreams];
                    row[streamNum] = singleResultEvent;
                    parentNode.Result(
                        row, streamNum, singleResultNode.ParentEvent, singleResultNode, resultFinalRows,
                        resultRootEvent);
                }

                // if there were child results we are done since they have already been posted to the parent
                return;
            }

            // We have multiple events for this node, generate an event row for each event not yet received from
            // event rows generated by the child node.
            foreach (var node in resultsForStream) {
                ISet<EventBean> events = node.Events;
                foreach (var theEvent in events) {
                    if (completedEvents.Contains(theEvent)) {
                        continue;
                    }

                    ProcessEvent(theEvent, node, resultFinalRows, resultRootEvent);
                }
            }
        }

        public override void Result(
            EventBean[] row,
            int fromStreamNum,
            EventBean myEvent,
            Node myNode,
            ICollection<EventBean[]> resultFinalRows,
            EventBean resultRootEvent)
        {
            row[streamNum] = myEvent;
            Node parentResultNode = myNode.Parent;
            parentNode.Result(row, streamNum, myNode.ParentEvent, parentResultNode, resultFinalRows, resultRootEvent);

            // record the fact that an event that was generated by a child
            haveChildResults = true;

            // If we had more then on result event for this stream, we need to track all the different events
            // generated by the child node
            if (singleResultNode == null) {
                completedEvents.Add(myEvent);
            }
        }

        public override void Print(IndentWriter indentWriter)
        {
            indentWriter.WriteLine("BranchOptionalAssemblyNode streamNum=" + streamNum);
        }

        private void ProcessEvent(
            EventBean theEvent,
            Node currentNode,
            ICollection<EventBean[]> resultFinalRows,
            EventBean resultRootEvent)
        {
            var row = new EventBean[numStreams];
            row[streamNum] = theEvent;
            parentNode.Result(
                row, streamNum, currentNode.ParentEvent, currentNode.Parent, resultFinalRows, resultRootEvent);
        }
    }
} // end of namespace